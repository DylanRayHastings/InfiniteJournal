# pyproject.toml

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "infinitejournal"
version = "1.0.2"
description = "A 3D infinite journal application for creative drawing and note-taking"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Unlicense"}
authors = [
    {name = "Dylan Hastings", email = "HastingsDylanR@gmail.com"},
]
maintainers = [
    {name = "Dylan Hastings", email = "HastingsDylanR@gmail.com"},
]
keywords = [
    "3d",
    "journal",
    "drawing",
    "creative",
    "opengl",
    "infinite-canvas",
    "note-taking",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: X11 Applications",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Artistic Software",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Editors",
    "Typing :: Typed",
]

dependencies = [
    "pygame>=2.5.0",
    "PyOpenGL>=3.1.6",
    "PyOpenGL-accelerate>=3.1.6",
    "numpy>=1.24.0",
    "Pillow>=10.0.0",
    "msgpack>=1.0.5",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.1.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.92.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]
perf = [
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/infinitejournal"
Documentation = "https://infinitejournal.readthedocs.io"
Repository = "https://github.com/yourusername/infinitejournal.git"
Issues = "https://github.com/yourusername/infinitejournal/issues"
Changelog = "https://github.com/yourusername/infinitejournal/blob/main/CHANGELOG.md"

[project.scripts]
infinitejournal = "infinitejournal.main:main"
infinitejournal-diagnostic = "infinitejournal.utilities.diagnostic:main"

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["infinitejournal*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
infinitejournal = [
    "py.typed",
    "data/*.json",
    "shaders/*.glsl",
    "assets/*",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=infinitejournal",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests that require GUI",
    "opengl: marks tests that require OpenGL",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = 100

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]