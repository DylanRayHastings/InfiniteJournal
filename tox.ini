# tox.ini - Tox automation configuration

[tox]
envlist = 
    py{38,39,310,311,312}
    lint
    type
    docs
    coverage
    security
    packaging
minversion = 4.0
skipsdist = false
skip_missing_interpreters = true
isolated_build = true

[testenv]
description = Run unit tests with pytest
usedevelop = true
setenv = 
    PYTHONPATH = {toxinidir}/src
    INFINITEJOURNAL_ENV = test
    INFINITEJOURNAL_DEBUG = true
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv = 
    HOME
    USER
    USERNAME
    DISPLAY
    XAUTHORITY
    CI
    GITHUB_*
deps = 
    -r{toxinidir}/requirements/test.txt
commands = 
    pytest {posargs:tests/} \
        --cov=infinitejournal \
        --cov-report=term-missing:skip-covered \
        --cov-report=html:{envtmpdir}/htmlcov \
        --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
        -n auto

[testenv:py38]
description = Python 3.8 tests
basepython = python3.8

[testenv:py39]
description = Python 3.9 tests
basepython = python3.9

[testenv:py310]
description = Python 3.10 tests
basepython = python3.10

[testenv:py311]
description = Python 3.11 tests
basepython = python3.11

[testenv:py312]
description = Python 3.12 tests
basepython = python3.12

[testenv:lint]
description = Run all linting tools
skip_install = true
deps = 
    black>=24.1.0
    isort>=5.13.0
    flake8>=7.0.0
    flake8-bugbear
    flake8-comprehensions
    flake8-simplify
    flake8-docstrings
    flake8-pytest-style
    pep8-naming
    pylint>=3.0.0
commands = 
    black --check --diff {toxinidir}/src {toxinidir}/tests
    isort --check-only --diff {toxinidir}/src {toxinidir}/tests
    flake8 {toxinidir}/src {toxinidir}/tests
    pylint {toxinidir}/src

[testenv:format]
description = Format code with black and isort
skip_install = true
deps = 
    black>=24.1.0
    isort>=5.13.0
commands = 
    black {toxinidir}/src {toxinidir}/tests
    isort {toxinidir}/src {toxinidir}/tests

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.8.0
    types-PyYAML
    types-requests
    numpy
    pygame-stubs
commands = 
    mypy {toxinidir}/src

[testenv:docs]
description = Build documentation with Sphinx
changedir = {toxinidir}/docs
deps = 
    -r{toxinidir}/requirements/docs.txt
commands = 
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:docs-serve]
description = Build and serve documentation
changedir = {toxinidir}/docs
deps = 
    -r{toxinidir}/requirements/docs.txt
commands = 
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html
    python -m http.server --directory {envtmpdir}/html 8080

[testenv:coverage]
description = Combine coverage data and generate reports
skip_install = true
deps = 
    coverage[toml]>=7.0
setenv = 
    COVERAGE_FILE = {toxworkdir}/.coverage
commands = 
    coverage combine {toxworkdir}/.coverage.*
    coverage report
    coverage html -d {toxworkdir}/htmlcov
    coverage xml -o {toxworkdir}/coverage.xml

[testenv:security]
description = Run security checks
deps = 
    bandit[toml]>=1.7.0
    safety>=2.3.0
    pip-audit>=2.0.0
commands = 
    bandit -r {toxinidir}/src -ll -f json -o {envtmpdir}/bandit.json
    safety check --json --output {envtmpdir}/safety.json
    pip-audit --desc

[testenv:packaging]
description = Check packaging for PyPI
skip_install = true
deps = 
    build>=1.0.0
    twine>=4.0.0
    check-manifest>=0.49
    readme-renderer[md]>=42.0
commands = 
    check-manifest
    python -m build --outdir {envtmpdir}/dist
    twine check {envtmpdir}/dist/*

[testenv:clean]
description = Clean up temporary files
skip_install = true
deps = 
commands = 
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.pyc')]"
    python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.pyo')]"
    python -c "import pathlib; [p.rmdir() for p in pathlib.Path('.').rglob('__pycache__')]"

[testenv:dev]
description = Development environment with all tools
usedevelop = true
deps = 
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/develop.txt
commands = 
    python --version
    pip list

[testenv:benchmark]
description = Run performance benchmarks
deps = 
    pytest-benchmark>=4.0.0
    -r{toxinidir}/requirements/test.txt
commands = 
    pytest {toxinidir}/benchmarks \
        --benchmark-only \
        --benchmark-autosave \
        --benchmark-save-data

[testenv:profile]
description = Profile the application
deps = 
    -r{toxinidir}/requirements/base.txt
    py-spy>=0.3.14
    memory-profiler>=0.61.0
    line-profiler>=4.1.0
commands = 
    py-spy record -o {envtmpdir}/profile.svg -- python {toxinidir}/run.py

[testenv:integration]
description = Run integration tests
setenv = 
    {[testenv]setenv}
    INFINITEJOURNAL_INTEGRATION_TESTS = true
deps = 
    {[testenv]deps}
commands = 
    pytest {toxinidir}/tests/integration -v -m integration

[testenv:smoke]
description = Run smoke tests
deps = 
    {[testenv]deps}
commands = 
    pytest {toxinidir}/tests -v -m smoke --tb=short

# Configuration for other tools
[flake8]
max-line-length = 100
max-complexity = 10
extend-ignore = E203, W503
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv

[pytest]
minversion = 7.0
testpaths = tests

[coverage:run]
source = src
branch = true
parallel = true

[coverage:report]
precision = 2
show_missing = true
skip_covered = true

[coverage:paths]
source = 
    src/
    .tox/*/lib/python*/site-packages/

[isort]
profile = black
line_length = 100
known_first_party = infinitejournal

[mypy]
python_version = 3.8
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true